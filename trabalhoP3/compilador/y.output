Grammar

    0 $accept: ProgG $end

    1 ProgG: ProgG SE Cond '{' ProgG '}' Se
    2      | ProgG ENQ Cond '{' ProgG '}'
    3      | ProgG TIPO Eatrib ';'
    4      | ProgG VAR '=' Expr ';'
    5      | ProgG VAR '[' Expr ']' '=' Expr ';'
    6      | ProgG TIPO VAR Ltipo '{' Prog '}'
    7      | ProgG VAR Lexpr ';'
    8      | ProgG ';'
    9      | ProgG COM
   10      | %empty

   11 Prog: Prog SE Cond '{' Prog '}' Se
   12     | Prog ENQ Cond '{' Prog '}'
   13     | Prog TIPO Eatrib ';'
   14     | Prog VAR '=' Expr ';'
   15     | Prog VAR '[' Expr ']' '=' Expr ';'
   16     | Prog VAR Lexpr ';'
   17     | Prog ';'
   18     | Prog COM
   19     | Prog RETURN Expr ';'
   20     | %empty

   21 Eatrib: VAR
   22       | VAR '[' Expr ']'
   23       | VAR '=' Expr
   24       | VAR '[' Expr ']' '=' Expr
   25       | Eatrib ',' VAR '=' Expr
   26       | Eatrib ',' VAR

   27 Lexpr: '(' ')'
   28      | '(' Eexpr ')'

   29 Eexpr: Expr
   30      | Eexpr ',' Expr

   31 Ltipo: '(' ')'
   32      | '(' Etipo ')'

   33 Etipo: TIPO VAR
   34      | Etipo ',' TIPO VAR

   35 Se: %empty
   36   | CASO Cond '{' Prog '}' Se
   37   | SENAO '{' Prog '}'

   38 Cond: NUM
   39     | '(' Expr EQ Expr ')'
   40     | '(' Expr NEQ Expr ')'
   41     | '(' Expr '<' Expr ')'
   42     | '(' Expr '>' Expr ')'
   43     | '(' Expr LEQ Expr ')'
   44     | '(' Expr GEQ Expr ')'
   45     | '(' Cond E Cond ')'
   46     | '(' Cond OU Cond ')'
   47     | '!' Cond

   48 Sexpr: VAR
   49      | NUM
   50      | VAR '[' Expr ']'
   51      | VAR Lexpr
   52      | STR

   53 Expr: '(' Expr '+' Expr ')'
   54     | '(' Expr '-' Expr ')'
   55     | '(' Expr '*' Expr ')'
   56     | '(' Expr '/' Expr ')'
   57     | '(' Expr '%' Expr ')'
   58     | '(' Expr ')'
   59     | Sexpr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 47
'%' (37) 57
'(' (40) 27 28 31 32 39 40 41 42 43 44 45 46 53 54 55 56 57 58
')' (41) 27 28 31 32 39 40 41 42 43 44 45 46 53 54 55 56 57 58
'*' (42) 55
'+' (43) 53
',' (44) 25 26 30 34
'-' (45) 54
'/' (47) 56
';' (59) 3 4 5 7 8 13 14 15 16 17 19
'<' (60) 41
'=' (61) 4 5 14 15 23 24 25
'>' (62) 42
'[' (91) 5 15 22 24 50
']' (93) 5 15 22 24 50
'{' (123) 1 2 6 11 12 36 37
'}' (125) 1 2 6 11 12 36 37
error (256)
SE (258) 1 11
SENAO (259) 37
CASO (260) 36
ENQ (261) 2 12
VAR (262) 4 5 6 7 14 15 16 21 22 23 24 25 26 33 34 48 50 51
TIPO (263) 3 6 13 33 34
NUM (264) 38 49
EQ (265) 39
NEQ (266) 40
LEQ (267) 43
GEQ (268) 44
E (269) 45
OU (270) 46
STR (271) 52
COM (272) 9 18
RETURN (273) 19


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
ProgG (37)
    on left: 1 2 3 4 5 6 7 8 9 10, on right: 0 1 2 3 4 5 6 7 8 9
Prog (38)
    on left: 11 12 13 14 15 16 17 18 19 20, on right: 6 11 12 13 14
    15 16 17 18 19 36 37
Eatrib (39)
    on left: 21 22 23 24 25 26, on right: 3 13 25 26
Lexpr (40)
    on left: 27 28, on right: 7 16 51
Eexpr (41)
    on left: 29 30, on right: 28 30
Ltipo (42)
    on left: 31 32, on right: 6
Etipo (43)
    on left: 33 34, on right: 32 34
Se (44)
    on left: 35 36 37, on right: 1 11 36
Cond (45)
    on left: 38 39 40 41 42 43 44 45 46 47, on right: 1 2 11 12 36
    45 46 47
Sexpr (46)
    on left: 48 49 50 51 52, on right: 59
Expr (47)
    on left: 53 54 55 56 57 58 59, on right: 4 5 14 15 19 22 23 24
    25 29 30 39 40 41 42 43 44 50 53 54 55 56 57 58


State 0

    0 $accept: . ProgG $end

    $default  reduce using rule 10 (ProgG)

    ProgG  go to state 1


State 1

    0 $accept: ProgG . $end
    1 ProgG: ProgG . SE Cond '{' ProgG '}' Se
    2      | ProgG . ENQ Cond '{' ProgG '}'
    3      | ProgG . TIPO Eatrib ';'
    4      | ProgG . VAR '=' Expr ';'
    5      | ProgG . VAR '[' Expr ']' '=' Expr ';'
    6      | ProgG . TIPO VAR Ltipo '{' Prog '}'
    7      | ProgG . VAR Lexpr ';'
    8      | ProgG . ';'
    9      | ProgG . COM

    $end  shift, and go to state 2
    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 5
    TIPO  shift, and go to state 6
    COM   shift, and go to state 7
    ';'   shift, and go to state 8


State 2

    0 $accept: ProgG $end .

    $default  accept


State 3

    1 ProgG: ProgG SE . Cond '{' ProgG '}' Se

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 12


State 4

    2 ProgG: ProgG ENQ . Cond '{' ProgG '}'

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 13


State 5

    4 ProgG: ProgG VAR . '=' Expr ';'
    5      | ProgG VAR . '[' Expr ']' '=' Expr ';'
    7      | ProgG VAR . Lexpr ';'

    '='  shift, and go to state 14
    '['  shift, and go to state 15
    '('  shift, and go to state 16

    Lexpr  go to state 17


State 6

    3 ProgG: ProgG TIPO . Eatrib ';'
    6      | ProgG TIPO . VAR Ltipo '{' Prog '}'

    VAR  shift, and go to state 18

    Eatrib  go to state 19


State 7

    9 ProgG: ProgG COM .

    $default  reduce using rule 9 (ProgG)


State 8

    8 ProgG: ProgG ';' .

    $default  reduce using rule 8 (ProgG)


State 9

   38 Cond: NUM .

    $default  reduce using rule 38 (Cond)


State 10

   39 Cond: '(' . Expr EQ Expr ')'
   40     | '(' . Expr NEQ Expr ')'
   41     | '(' . Expr '<' Expr ')'
   42     | '(' . Expr '>' Expr ')'
   43     | '(' . Expr LEQ Expr ')'
   44     | '(' . Expr GEQ Expr ')'
   45     | '(' . Cond E Cond ')'
   46     | '(' . Cond OU Cond ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 21
    STR  shift, and go to state 22
    '('  shift, and go to state 23
    '!'  shift, and go to state 11

    Cond   go to state 24
    Sexpr  go to state 25
    Expr   go to state 26


State 11

   47 Cond: '!' . Cond

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 27


State 12

    1 ProgG: ProgG SE Cond . '{' ProgG '}' Se

    '{'  shift, and go to state 28


State 13

    2 ProgG: ProgG ENQ Cond . '{' ProgG '}'

    '{'  shift, and go to state 29


State 14

    4 ProgG: ProgG VAR '=' . Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 32


State 15

    5 ProgG: ProgG VAR '[' . Expr ']' '=' Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 33


State 16

   27 Lexpr: '(' . ')'
   28      | '(' . Eexpr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31
    ')'  shift, and go to state 34

    Eexpr  go to state 35
    Sexpr  go to state 25
    Expr   go to state 36


State 17

    7 ProgG: ProgG VAR Lexpr . ';'

    ';'  shift, and go to state 37


State 18

    6 ProgG: ProgG TIPO VAR . Ltipo '{' Prog '}'
   21 Eatrib: VAR .
   22       | VAR . '[' Expr ']'
   23       | VAR . '=' Expr
   24       | VAR . '[' Expr ']' '=' Expr

    '='  shift, and go to state 38
    '['  shift, and go to state 39
    '('  shift, and go to state 40

    $default  reduce using rule 21 (Eatrib)

    Ltipo  go to state 41


State 19

    3 ProgG: ProgG TIPO Eatrib . ';'
   25 Eatrib: Eatrib . ',' VAR '=' Expr
   26       | Eatrib . ',' VAR

    ';'  shift, and go to state 42
    ','  shift, and go to state 43


State 20

   48 Sexpr: VAR .
   50      | VAR . '[' Expr ']'
   51      | VAR . Lexpr

    '['  shift, and go to state 44
    '('  shift, and go to state 16

    $default  reduce using rule 48 (Sexpr)

    Lexpr  go to state 45


State 21

   38 Cond: NUM .
   49 Sexpr: NUM .

    E         reduce using rule 38 (Cond)
    OU        reduce using rule 38 (Cond)
    $default  reduce using rule 49 (Sexpr)


State 22

   52 Sexpr: STR .

    $default  reduce using rule 52 (Sexpr)


State 23

   39 Cond: '(' . Expr EQ Expr ')'
   40     | '(' . Expr NEQ Expr ')'
   41     | '(' . Expr '<' Expr ')'
   42     | '(' . Expr '>' Expr ')'
   43     | '(' . Expr LEQ Expr ')'
   44     | '(' . Expr GEQ Expr ')'
   45     | '(' . Cond E Cond ')'
   46     | '(' . Cond OU Cond ')'
   53 Expr: '(' . Expr '+' Expr ')'
   54     | '(' . Expr '-' Expr ')'
   55     | '(' . Expr '*' Expr ')'
   56     | '(' . Expr '/' Expr ')'
   57     | '(' . Expr '%' Expr ')'
   58     | '(' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 21
    STR  shift, and go to state 22
    '('  shift, and go to state 23
    '!'  shift, and go to state 11

    Cond   go to state 24
    Sexpr  go to state 25
    Expr   go to state 46


State 24

   45 Cond: '(' Cond . E Cond ')'
   46     | '(' Cond . OU Cond ')'

    E   shift, and go to state 47
    OU  shift, and go to state 48


State 25

   59 Expr: Sexpr .

    $default  reduce using rule 59 (Expr)


State 26

   39 Cond: '(' Expr . EQ Expr ')'
   40     | '(' Expr . NEQ Expr ')'
   41     | '(' Expr . '<' Expr ')'
   42     | '(' Expr . '>' Expr ')'
   43     | '(' Expr . LEQ Expr ')'
   44     | '(' Expr . GEQ Expr ')'

    EQ   shift, and go to state 49
    NEQ  shift, and go to state 50
    LEQ  shift, and go to state 51
    GEQ  shift, and go to state 52
    '<'  shift, and go to state 53
    '>'  shift, and go to state 54


State 27

   47 Cond: '!' Cond .

    $default  reduce using rule 47 (Cond)


State 28

    1 ProgG: ProgG SE Cond '{' . ProgG '}' Se

    $default  reduce using rule 10 (ProgG)

    ProgG  go to state 55


State 29

    2 ProgG: ProgG ENQ Cond '{' . ProgG '}'

    $default  reduce using rule 10 (ProgG)

    ProgG  go to state 56


State 30

   49 Sexpr: NUM .

    $default  reduce using rule 49 (Sexpr)


State 31

   53 Expr: '(' . Expr '+' Expr ')'
   54     | '(' . Expr '-' Expr ')'
   55     | '(' . Expr '*' Expr ')'
   56     | '(' . Expr '/' Expr ')'
   57     | '(' . Expr '%' Expr ')'
   58     | '(' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 57


State 32

    4 ProgG: ProgG VAR '=' Expr . ';'

    ';'  shift, and go to state 58


State 33

    5 ProgG: ProgG VAR '[' Expr . ']' '=' Expr ';'

    ']'  shift, and go to state 59


State 34

   27 Lexpr: '(' ')' .

    $default  reduce using rule 27 (Lexpr)


State 35

   28 Lexpr: '(' Eexpr . ')'
   30 Eexpr: Eexpr . ',' Expr

    ','  shift, and go to state 60
    ')'  shift, and go to state 61


State 36

   29 Eexpr: Expr .

    $default  reduce using rule 29 (Eexpr)


State 37

    7 ProgG: ProgG VAR Lexpr ';' .

    $default  reduce using rule 7 (ProgG)


State 38

   23 Eatrib: VAR '=' . Expr

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 62


State 39

   22 Eatrib: VAR '[' . Expr ']'
   24       | VAR '[' . Expr ']' '=' Expr

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 63


State 40

   31 Ltipo: '(' . ')'
   32      | '(' . Etipo ')'

    TIPO  shift, and go to state 64
    ')'   shift, and go to state 65

    Etipo  go to state 66


State 41

    6 ProgG: ProgG TIPO VAR Ltipo . '{' Prog '}'

    '{'  shift, and go to state 67


State 42

    3 ProgG: ProgG TIPO Eatrib ';' .

    $default  reduce using rule 3 (ProgG)


State 43

   25 Eatrib: Eatrib ',' . VAR '=' Expr
   26       | Eatrib ',' . VAR

    VAR  shift, and go to state 68


State 44

   50 Sexpr: VAR '[' . Expr ']'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 69


State 45

   51 Sexpr: VAR Lexpr .

    $default  reduce using rule 51 (Sexpr)


State 46

   39 Cond: '(' Expr . EQ Expr ')'
   40     | '(' Expr . NEQ Expr ')'
   41     | '(' Expr . '<' Expr ')'
   42     | '(' Expr . '>' Expr ')'
   43     | '(' Expr . LEQ Expr ')'
   44     | '(' Expr . GEQ Expr ')'
   53 Expr: '(' Expr . '+' Expr ')'
   54     | '(' Expr . '-' Expr ')'
   55     | '(' Expr . '*' Expr ')'
   56     | '(' Expr . '/' Expr ')'
   57     | '(' Expr . '%' Expr ')'
   58     | '(' Expr . ')'

    EQ   shift, and go to state 49
    NEQ  shift, and go to state 50
    LEQ  shift, and go to state 51
    GEQ  shift, and go to state 52
    ')'  shift, and go to state 70
    '<'  shift, and go to state 53
    '>'  shift, and go to state 54
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75


State 47

   45 Cond: '(' Cond E . Cond ')'

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 76


State 48

   46 Cond: '(' Cond OU . Cond ')'

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 77


State 49

   39 Cond: '(' Expr EQ . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 78


State 50

   40 Cond: '(' Expr NEQ . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 79


State 51

   43 Cond: '(' Expr LEQ . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 80


State 52

   44 Cond: '(' Expr GEQ . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 81


State 53

   41 Cond: '(' Expr '<' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 82


State 54

   42 Cond: '(' Expr '>' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 83


State 55

    1 ProgG: ProgG . SE Cond '{' ProgG '}' Se
    1      | ProgG SE Cond '{' ProgG . '}' Se
    2      | ProgG . ENQ Cond '{' ProgG '}'
    3      | ProgG . TIPO Eatrib ';'
    4      | ProgG . VAR '=' Expr ';'
    5      | ProgG . VAR '[' Expr ']' '=' Expr ';'
    6      | ProgG . TIPO VAR Ltipo '{' Prog '}'
    7      | ProgG . VAR Lexpr ';'
    8      | ProgG . ';'
    9      | ProgG . COM

    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 5
    TIPO  shift, and go to state 6
    COM   shift, and go to state 7
    '}'   shift, and go to state 84
    ';'   shift, and go to state 8


State 56

    1 ProgG: ProgG . SE Cond '{' ProgG '}' Se
    2      | ProgG . ENQ Cond '{' ProgG '}'
    2      | ProgG ENQ Cond '{' ProgG . '}'
    3      | ProgG . TIPO Eatrib ';'
    4      | ProgG . VAR '=' Expr ';'
    5      | ProgG . VAR '[' Expr ']' '=' Expr ';'
    6      | ProgG . TIPO VAR Ltipo '{' Prog '}'
    7      | ProgG . VAR Lexpr ';'
    8      | ProgG . ';'
    9      | ProgG . COM

    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 5
    TIPO  shift, and go to state 6
    COM   shift, and go to state 7
    '}'   shift, and go to state 85
    ';'   shift, and go to state 8


State 57

   53 Expr: '(' Expr . '+' Expr ')'
   54     | '(' Expr . '-' Expr ')'
   55     | '(' Expr . '*' Expr ')'
   56     | '(' Expr . '/' Expr ')'
   57     | '(' Expr . '%' Expr ')'
   58     | '(' Expr . ')'

    ')'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75


State 58

    4 ProgG: ProgG VAR '=' Expr ';' .

    $default  reduce using rule 4 (ProgG)


State 59

    5 ProgG: ProgG VAR '[' Expr ']' . '=' Expr ';'

    '='  shift, and go to state 86


State 60

   30 Eexpr: Eexpr ',' . Expr

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 87


State 61

   28 Lexpr: '(' Eexpr ')' .

    $default  reduce using rule 28 (Lexpr)


State 62

   23 Eatrib: VAR '=' Expr .

    $default  reduce using rule 23 (Eatrib)


State 63

   22 Eatrib: VAR '[' Expr . ']'
   24       | VAR '[' Expr . ']' '=' Expr

    ']'  shift, and go to state 88


State 64

   33 Etipo: TIPO . VAR

    VAR  shift, and go to state 89


State 65

   31 Ltipo: '(' ')' .

    $default  reduce using rule 31 (Ltipo)


State 66

   32 Ltipo: '(' Etipo . ')'
   34 Etipo: Etipo . ',' TIPO VAR

    ','  shift, and go to state 90
    ')'  shift, and go to state 91


State 67

    6 ProgG: ProgG TIPO VAR Ltipo '{' . Prog '}'

    $default  reduce using rule 20 (Prog)

    Prog  go to state 92


State 68

   25 Eatrib: Eatrib ',' VAR . '=' Expr
   26       | Eatrib ',' VAR .

    '='  shift, and go to state 93

    $default  reduce using rule 26 (Eatrib)


State 69

   50 Sexpr: VAR '[' Expr . ']'

    ']'  shift, and go to state 94


State 70

   58 Expr: '(' Expr ')' .

    $default  reduce using rule 58 (Expr)


State 71

   53 Expr: '(' Expr '+' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 95


State 72

   54 Expr: '(' Expr '-' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 96


State 73

   55 Expr: '(' Expr '*' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 97


State 74

   56 Expr: '(' Expr '/' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 98


State 75

   57 Expr: '(' Expr '%' . Expr ')'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 99


State 76

   45 Cond: '(' Cond E Cond . ')'

    ')'  shift, and go to state 100


State 77

   46 Cond: '(' Cond OU Cond . ')'

    ')'  shift, and go to state 101


State 78

   39 Cond: '(' Expr EQ Expr . ')'

    ')'  shift, and go to state 102


State 79

   40 Cond: '(' Expr NEQ Expr . ')'

    ')'  shift, and go to state 103


State 80

   43 Cond: '(' Expr LEQ Expr . ')'

    ')'  shift, and go to state 104


State 81

   44 Cond: '(' Expr GEQ Expr . ')'

    ')'  shift, and go to state 105


State 82

   41 Cond: '(' Expr '<' Expr . ')'

    ')'  shift, and go to state 106


State 83

   42 Cond: '(' Expr '>' Expr . ')'

    ')'  shift, and go to state 107


State 84

    1 ProgG: ProgG SE Cond '{' ProgG '}' . Se

    SENAO  shift, and go to state 108
    CASO   shift, and go to state 109

    $default  reduce using rule 35 (Se)

    Se  go to state 110


State 85

    2 ProgG: ProgG ENQ Cond '{' ProgG '}' .

    $default  reduce using rule 2 (ProgG)


State 86

    5 ProgG: ProgG VAR '[' Expr ']' '=' . Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 111


State 87

   30 Eexpr: Eexpr ',' Expr .

    $default  reduce using rule 30 (Eexpr)


State 88

   22 Eatrib: VAR '[' Expr ']' .
   24       | VAR '[' Expr ']' . '=' Expr

    '='  shift, and go to state 112

    $default  reduce using rule 22 (Eatrib)


State 89

   33 Etipo: TIPO VAR .

    $default  reduce using rule 33 (Etipo)


State 90

   34 Etipo: Etipo ',' . TIPO VAR

    TIPO  shift, and go to state 113


State 91

   32 Ltipo: '(' Etipo ')' .

    $default  reduce using rule 32 (Ltipo)


State 92

    6 ProgG: ProgG TIPO VAR Ltipo '{' Prog . '}'
   11 Prog: Prog . SE Cond '{' Prog '}' Se
   12     | Prog . ENQ Cond '{' Prog '}'
   13     | Prog . TIPO Eatrib ';'
   14     | Prog . VAR '=' Expr ';'
   15     | Prog . VAR '[' Expr ']' '=' Expr ';'
   16     | Prog . VAR Lexpr ';'
   17     | Prog . ';'
   18     | Prog . COM
   19     | Prog . RETURN Expr ';'

    SE      shift, and go to state 114
    ENQ     shift, and go to state 115
    VAR     shift, and go to state 116
    TIPO    shift, and go to state 117
    COM     shift, and go to state 118
    RETURN  shift, and go to state 119
    '}'     shift, and go to state 120
    ';'     shift, and go to state 121


State 93

   25 Eatrib: Eatrib ',' VAR '=' . Expr

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 122


State 94

   50 Sexpr: VAR '[' Expr ']' .

    $default  reduce using rule 50 (Sexpr)


State 95

   53 Expr: '(' Expr '+' Expr . ')'

    ')'  shift, and go to state 123


State 96

   54 Expr: '(' Expr '-' Expr . ')'

    ')'  shift, and go to state 124


State 97

   55 Expr: '(' Expr '*' Expr . ')'

    ')'  shift, and go to state 125


State 98

   56 Expr: '(' Expr '/' Expr . ')'

    ')'  shift, and go to state 126


State 99

   57 Expr: '(' Expr '%' Expr . ')'

    ')'  shift, and go to state 127


State 100

   45 Cond: '(' Cond E Cond ')' .

    $default  reduce using rule 45 (Cond)


State 101

   46 Cond: '(' Cond OU Cond ')' .

    $default  reduce using rule 46 (Cond)


State 102

   39 Cond: '(' Expr EQ Expr ')' .

    $default  reduce using rule 39 (Cond)


State 103

   40 Cond: '(' Expr NEQ Expr ')' .

    $default  reduce using rule 40 (Cond)


State 104

   43 Cond: '(' Expr LEQ Expr ')' .

    $default  reduce using rule 43 (Cond)


State 105

   44 Cond: '(' Expr GEQ Expr ')' .

    $default  reduce using rule 44 (Cond)


State 106

   41 Cond: '(' Expr '<' Expr ')' .

    $default  reduce using rule 41 (Cond)


State 107

   42 Cond: '(' Expr '>' Expr ')' .

    $default  reduce using rule 42 (Cond)


State 108

   37 Se: SENAO . '{' Prog '}'

    '{'  shift, and go to state 128


State 109

   36 Se: CASO . Cond '{' Prog '}' Se

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 129


State 110

    1 ProgG: ProgG SE Cond '{' ProgG '}' Se .

    $default  reduce using rule 1 (ProgG)


State 111

    5 ProgG: ProgG VAR '[' Expr ']' '=' Expr . ';'

    ';'  shift, and go to state 130


State 112

   24 Eatrib: VAR '[' Expr ']' '=' . Expr

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 131


State 113

   34 Etipo: Etipo ',' TIPO . VAR

    VAR  shift, and go to state 132


State 114

   11 Prog: Prog SE . Cond '{' Prog '}' Se

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 133


State 115

   12 Prog: Prog ENQ . Cond '{' Prog '}'

    NUM  shift, and go to state 9
    '('  shift, and go to state 10
    '!'  shift, and go to state 11

    Cond  go to state 134


State 116

   14 Prog: Prog VAR . '=' Expr ';'
   15     | Prog VAR . '[' Expr ']' '=' Expr ';'
   16     | Prog VAR . Lexpr ';'

    '='  shift, and go to state 135
    '['  shift, and go to state 136
    '('  shift, and go to state 16

    Lexpr  go to state 137


State 117

   13 Prog: Prog TIPO . Eatrib ';'

    VAR  shift, and go to state 138

    Eatrib  go to state 139


State 118

   18 Prog: Prog COM .

    $default  reduce using rule 18 (Prog)


State 119

   19 Prog: Prog RETURN . Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 140


State 120

    6 ProgG: ProgG TIPO VAR Ltipo '{' Prog '}' .

    $default  reduce using rule 6 (ProgG)


State 121

   17 Prog: Prog ';' .

    $default  reduce using rule 17 (Prog)


State 122

   25 Eatrib: Eatrib ',' VAR '=' Expr .

    $default  reduce using rule 25 (Eatrib)


State 123

   53 Expr: '(' Expr '+' Expr ')' .

    $default  reduce using rule 53 (Expr)


State 124

   54 Expr: '(' Expr '-' Expr ')' .

    $default  reduce using rule 54 (Expr)


State 125

   55 Expr: '(' Expr '*' Expr ')' .

    $default  reduce using rule 55 (Expr)


State 126

   56 Expr: '(' Expr '/' Expr ')' .

    $default  reduce using rule 56 (Expr)


State 127

   57 Expr: '(' Expr '%' Expr ')' .

    $default  reduce using rule 57 (Expr)


State 128

   37 Se: SENAO '{' . Prog '}'

    $default  reduce using rule 20 (Prog)

    Prog  go to state 141


State 129

   36 Se: CASO Cond . '{' Prog '}' Se

    '{'  shift, and go to state 142


State 130

    5 ProgG: ProgG VAR '[' Expr ']' '=' Expr ';' .

    $default  reduce using rule 5 (ProgG)


State 131

   24 Eatrib: VAR '[' Expr ']' '=' Expr .

    $default  reduce using rule 24 (Eatrib)


State 132

   34 Etipo: Etipo ',' TIPO VAR .

    $default  reduce using rule 34 (Etipo)


State 133

   11 Prog: Prog SE Cond . '{' Prog '}' Se

    '{'  shift, and go to state 143


State 134

   12 Prog: Prog ENQ Cond . '{' Prog '}'

    '{'  shift, and go to state 144


State 135

   14 Prog: Prog VAR '=' . Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 145


State 136

   15 Prog: Prog VAR '[' . Expr ']' '=' Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 146


State 137

   16 Prog: Prog VAR Lexpr . ';'

    ';'  shift, and go to state 147


State 138

   21 Eatrib: VAR .
   22       | VAR . '[' Expr ']'
   23       | VAR . '=' Expr
   24       | VAR . '[' Expr ']' '=' Expr

    '='  shift, and go to state 38
    '['  shift, and go to state 39

    $default  reduce using rule 21 (Eatrib)


State 139

   13 Prog: Prog TIPO Eatrib . ';'
   25 Eatrib: Eatrib . ',' VAR '=' Expr
   26       | Eatrib . ',' VAR

    ';'  shift, and go to state 148
    ','  shift, and go to state 43


State 140

   19 Prog: Prog RETURN Expr . ';'

    ';'  shift, and go to state 149


State 141

   11 Prog: Prog . SE Cond '{' Prog '}' Se
   12     | Prog . ENQ Cond '{' Prog '}'
   13     | Prog . TIPO Eatrib ';'
   14     | Prog . VAR '=' Expr ';'
   15     | Prog . VAR '[' Expr ']' '=' Expr ';'
   16     | Prog . VAR Lexpr ';'
   17     | Prog . ';'
   18     | Prog . COM
   19     | Prog . RETURN Expr ';'
   37 Se: SENAO '{' Prog . '}'

    SE      shift, and go to state 114
    ENQ     shift, and go to state 115
    VAR     shift, and go to state 116
    TIPO    shift, and go to state 117
    COM     shift, and go to state 118
    RETURN  shift, and go to state 119
    '}'     shift, and go to state 150
    ';'     shift, and go to state 121


State 142

   36 Se: CASO Cond '{' . Prog '}' Se

    $default  reduce using rule 20 (Prog)

    Prog  go to state 151


State 143

   11 Prog: Prog SE Cond '{' . Prog '}' Se

    $default  reduce using rule 20 (Prog)

    Prog  go to state 152


State 144

   12 Prog: Prog ENQ Cond '{' . Prog '}'

    $default  reduce using rule 20 (Prog)

    Prog  go to state 153


State 145

   14 Prog: Prog VAR '=' Expr . ';'

    ';'  shift, and go to state 154


State 146

   15 Prog: Prog VAR '[' Expr . ']' '=' Expr ';'

    ']'  shift, and go to state 155


State 147

   16 Prog: Prog VAR Lexpr ';' .

    $default  reduce using rule 16 (Prog)


State 148

   13 Prog: Prog TIPO Eatrib ';' .

    $default  reduce using rule 13 (Prog)


State 149

   19 Prog: Prog RETURN Expr ';' .

    $default  reduce using rule 19 (Prog)


State 150

   37 Se: SENAO '{' Prog '}' .

    $default  reduce using rule 37 (Se)


State 151

   11 Prog: Prog . SE Cond '{' Prog '}' Se
   12     | Prog . ENQ Cond '{' Prog '}'
   13     | Prog . TIPO Eatrib ';'
   14     | Prog . VAR '=' Expr ';'
   15     | Prog . VAR '[' Expr ']' '=' Expr ';'
   16     | Prog . VAR Lexpr ';'
   17     | Prog . ';'
   18     | Prog . COM
   19     | Prog . RETURN Expr ';'
   36 Se: CASO Cond '{' Prog . '}' Se

    SE      shift, and go to state 114
    ENQ     shift, and go to state 115
    VAR     shift, and go to state 116
    TIPO    shift, and go to state 117
    COM     shift, and go to state 118
    RETURN  shift, and go to state 119
    '}'     shift, and go to state 156
    ';'     shift, and go to state 121


State 152

   11 Prog: Prog . SE Cond '{' Prog '}' Se
   11     | Prog SE Cond '{' Prog . '}' Se
   12     | Prog . ENQ Cond '{' Prog '}'
   13     | Prog . TIPO Eatrib ';'
   14     | Prog . VAR '=' Expr ';'
   15     | Prog . VAR '[' Expr ']' '=' Expr ';'
   16     | Prog . VAR Lexpr ';'
   17     | Prog . ';'
   18     | Prog . COM
   19     | Prog . RETURN Expr ';'

    SE      shift, and go to state 114
    ENQ     shift, and go to state 115
    VAR     shift, and go to state 116
    TIPO    shift, and go to state 117
    COM     shift, and go to state 118
    RETURN  shift, and go to state 119
    '}'     shift, and go to state 157
    ';'     shift, and go to state 121


State 153

   11 Prog: Prog . SE Cond '{' Prog '}' Se
   12     | Prog . ENQ Cond '{' Prog '}'
   12     | Prog ENQ Cond '{' Prog . '}'
   13     | Prog . TIPO Eatrib ';'
   14     | Prog . VAR '=' Expr ';'
   15     | Prog . VAR '[' Expr ']' '=' Expr ';'
   16     | Prog . VAR Lexpr ';'
   17     | Prog . ';'
   18     | Prog . COM
   19     | Prog . RETURN Expr ';'

    SE      shift, and go to state 114
    ENQ     shift, and go to state 115
    VAR     shift, and go to state 116
    TIPO    shift, and go to state 117
    COM     shift, and go to state 118
    RETURN  shift, and go to state 119
    '}'     shift, and go to state 158
    ';'     shift, and go to state 121


State 154

   14 Prog: Prog VAR '=' Expr ';' .

    $default  reduce using rule 14 (Prog)


State 155

   15 Prog: Prog VAR '[' Expr ']' . '=' Expr ';'

    '='  shift, and go to state 159


State 156

   36 Se: CASO Cond '{' Prog '}' . Se

    SENAO  shift, and go to state 108
    CASO   shift, and go to state 109

    $default  reduce using rule 35 (Se)

    Se  go to state 160


State 157

   11 Prog: Prog SE Cond '{' Prog '}' . Se

    SENAO  shift, and go to state 108
    CASO   shift, and go to state 109

    $default  reduce using rule 35 (Se)

    Se  go to state 161


State 158

   12 Prog: Prog ENQ Cond '{' Prog '}' .

    $default  reduce using rule 12 (Prog)


State 159

   15 Prog: Prog VAR '[' Expr ']' '=' . Expr ';'

    VAR  shift, and go to state 20
    NUM  shift, and go to state 30
    STR  shift, and go to state 22
    '('  shift, and go to state 31

    Sexpr  go to state 25
    Expr   go to state 162


State 160

   36 Se: CASO Cond '{' Prog '}' Se .

    $default  reduce using rule 36 (Se)


State 161

   11 Prog: Prog SE Cond '{' Prog '}' Se .

    $default  reduce using rule 11 (Prog)


State 162

   15 Prog: Prog VAR '[' Expr ']' '=' Expr . ';'

    ';'  shift, and go to state 163


State 163

   15 Prog: Prog VAR '[' Expr ']' '=' Expr ';' .

    $default  reduce using rule 15 (Prog)
