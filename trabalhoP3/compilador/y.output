Grammar

    0 $accept: Prog $end

    1 Prog: SE Cond '{' Prog '}' Se
    2     | ENQ Cond '{' Prog '}' Prog
    3     | TIPO Eatrib ';' Prog
    4     | VAR '=' Expr ';' Prog
    5     | VAR '[' Expr ']' '=' Expr ';' Prog
    6     | TIPO VAR Ltipo '{' Prog '}' Prog
    7     | VAR Lexpr ';' Prog
    8     | ';' Prog
    9     | COM Prog
   10     | %empty

   11 Eatrib: VAR
   12       | VAR '[' Expr ']'
   13       | VAR '=' Expr
   14       | VAR '[' Expr ']' '=' Expr
   15       | Eatrib ',' VAR '=' Expr
   16       | Eatrib ',' VAR

   17 Lexpr: '(' ')'
   18      | '(' Eexpr ')'

   19 Eexpr: Expr
   20      | Eexpr ',' Expr

   21 Ltipo: '(' ')'
   22      | '(' Etipo ')'

   23 Etipo: TIPO VAR
   24      | Etipo ',' TIPO VAR

   25 Se: Prog
   26   | CASO Cond '{' Prog '}' SE
   27   | SENAO '{' Prog '}' Prog

   28 Cond: NUM
   29     | '(' Expr EQ Expr ')'
   30     | '(' Expr NEQ Expr ')'
   31     | '(' Expr '<' Expr ')'
   32     | '(' Expr '>' Expr ')'
   33     | '(' Expr LEQ Expr ')'
   34     | '(' Expr GEQ Expr ')'
   35     | '(' Cond E Cond ')'
   36     | '(' Cond OU Cond ')'
   37     | '!' Cond

   38 Sexpr: VAR
   39      | NUM
   40      | VAR '[' Expr ']'
   41      | VAR Lexpr
   42      | STR

   43 Expr: Expr '+' Sexpr
   44     | Expr '-' Sexpr
   45     | Expr '*' Sexpr
   46     | Expr '/' Sexpr
   47     | Expr '%' Sexpr
   48     | '(' Expr ')'
   49     | Sexpr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 37
'%' (37) 47
'(' (40) 17 18 21 22 29 30 31 32 33 34 35 36 48
')' (41) 17 18 21 22 29 30 31 32 33 34 35 36 48
'*' (42) 45
'+' (43) 43
',' (44) 15 16 20 24
'-' (45) 44
'/' (47) 46
';' (59) 3 4 5 7 8
'<' (60) 31
'=' (61) 4 5 13 14 15
'>' (62) 32
'[' (91) 5 12 14 40
']' (93) 5 12 14 40
'{' (123) 1 2 6 26 27
'}' (125) 1 2 6 26 27
error (256)
SE (258) 1 26
SENAO (259) 27
CASO (260) 26
ENQ (261) 2
VAR (262) 4 5 6 7 11 12 13 14 15 16 23 24 38 40 41
TIPO (263) 3 6 23 24
NUM (264) 28 39
EQ (265) 29
NEQ (266) 30
LEQ (267) 33
GEQ (268) 34
E (269) 35
OU (270) 36
STR (271) 42
COM (272) 9


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
Prog (36)
    on left: 1 2 3 4 5 6 7 8 9 10, on right: 0 1 2 3 4 5 6 7 8 9 25
    26 27
Eatrib (37)
    on left: 11 12 13 14 15 16, on right: 3 15 16
Lexpr (38)
    on left: 17 18, on right: 7 41
Eexpr (39)
    on left: 19 20, on right: 18 20
Ltipo (40)
    on left: 21 22, on right: 6
Etipo (41)
    on left: 23 24, on right: 22 24
Se (42)
    on left: 25 26 27, on right: 1
Cond (43)
    on left: 28 29 30 31 32 33 34 35 36 37, on right: 1 2 26 35 36
    37
Sexpr (44)
    on left: 38 39 40 41 42, on right: 43 44 45 46 47 49
Expr (45)
    on left: 43 44 45 46 47 48 49, on right: 4 5 12 13 14 15 19 20
    29 30 31 32 33 34 40 43 44 45 46 47 48


State 0

    0 $accept: . Prog $end

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 7


State 1

    1 Prog: SE . Cond '{' Prog '}' Se

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 11


State 2

    2 Prog: ENQ . Cond '{' Prog '}' Prog

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 12


State 3

    4 Prog: VAR . '=' Expr ';' Prog
    5     | VAR . '[' Expr ']' '=' Expr ';' Prog
    7     | VAR . Lexpr ';' Prog

    '='  shift, and go to state 13
    '['  shift, and go to state 14
    '('  shift, and go to state 15

    Lexpr  go to state 16


State 4

    3 Prog: TIPO . Eatrib ';' Prog
    6     | TIPO . VAR Ltipo '{' Prog '}' Prog

    VAR  shift, and go to state 17

    Eatrib  go to state 18


State 5

    9 Prog: COM . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 19


State 6

    8 Prog: ';' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 20


State 7

    0 $accept: Prog . $end

    $end  shift, and go to state 21


State 8

   28 Cond: NUM .

    $default  reduce using rule 28 (Cond)


State 9

   29 Cond: '(' . Expr EQ Expr ')'
   30     | '(' . Expr NEQ Expr ')'
   31     | '(' . Expr '<' Expr ')'
   32     | '(' . Expr '>' Expr ')'
   33     | '(' . Expr LEQ Expr ')'
   34     | '(' . Expr GEQ Expr ')'
   35     | '(' . Cond E Cond ')'
   36     | '(' . Cond OU Cond ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 23
    STR  shift, and go to state 24
    '('  shift, and go to state 25
    '!'  shift, and go to state 10

    Cond   go to state 26
    Sexpr  go to state 27
    Expr   go to state 28


State 10

   37 Cond: '!' . Cond

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 29


State 11

    1 Prog: SE Cond . '{' Prog '}' Se

    '{'  shift, and go to state 30


State 12

    2 Prog: ENQ Cond . '{' Prog '}' Prog

    '{'  shift, and go to state 31


State 13

    4 Prog: VAR '=' . Expr ';' Prog

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 34


State 14

    5 Prog: VAR '[' . Expr ']' '=' Expr ';' Prog

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 35


State 15

   17 Lexpr: '(' . ')'
   18      | '(' . Eexpr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33
    ')'  shift, and go to state 36

    Eexpr  go to state 37
    Sexpr  go to state 27
    Expr   go to state 38


State 16

    7 Prog: VAR Lexpr . ';' Prog

    ';'  shift, and go to state 39


State 17

    6 Prog: TIPO VAR . Ltipo '{' Prog '}' Prog
   11 Eatrib: VAR .
   12       | VAR . '[' Expr ']'
   13       | VAR . '=' Expr
   14       | VAR . '[' Expr ']' '=' Expr

    '='  shift, and go to state 40
    '['  shift, and go to state 41
    '('  shift, and go to state 42

    $default  reduce using rule 11 (Eatrib)

    Ltipo  go to state 43


State 18

    3 Prog: TIPO Eatrib . ';' Prog
   15 Eatrib: Eatrib . ',' VAR '=' Expr
   16       | Eatrib . ',' VAR

    ';'  shift, and go to state 44
    ','  shift, and go to state 45


State 19

    9 Prog: COM Prog .

    $default  reduce using rule 9 (Prog)


State 20

    8 Prog: ';' Prog .

    $default  reduce using rule 8 (Prog)


State 21

    0 $accept: Prog $end .

    $default  accept


State 22

   38 Sexpr: VAR .
   40      | VAR . '[' Expr ']'
   41      | VAR . Lexpr

    '['  shift, and go to state 46
    '('  shift, and go to state 15

    $default  reduce using rule 38 (Sexpr)

    Lexpr  go to state 47


State 23

   28 Cond: NUM .
   39 Sexpr: NUM .

    E         reduce using rule 28 (Cond)
    OU        reduce using rule 28 (Cond)
    $default  reduce using rule 39 (Sexpr)


State 24

   42 Sexpr: STR .

    $default  reduce using rule 42 (Sexpr)


State 25

   29 Cond: '(' . Expr EQ Expr ')'
   30     | '(' . Expr NEQ Expr ')'
   31     | '(' . Expr '<' Expr ')'
   32     | '(' . Expr '>' Expr ')'
   33     | '(' . Expr LEQ Expr ')'
   34     | '(' . Expr GEQ Expr ')'
   35     | '(' . Cond E Cond ')'
   36     | '(' . Cond OU Cond ')'
   48 Expr: '(' . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 23
    STR  shift, and go to state 24
    '('  shift, and go to state 25
    '!'  shift, and go to state 10

    Cond   go to state 26
    Sexpr  go to state 27
    Expr   go to state 48


State 26

   35 Cond: '(' Cond . E Cond ')'
   36     | '(' Cond . OU Cond ')'

    E   shift, and go to state 49
    OU  shift, and go to state 50


State 27

   49 Expr: Sexpr .

    $default  reduce using rule 49 (Expr)


State 28

   29 Cond: '(' Expr . EQ Expr ')'
   30     | '(' Expr . NEQ Expr ')'
   31     | '(' Expr . '<' Expr ')'
   32     | '(' Expr . '>' Expr ')'
   33     | '(' Expr . LEQ Expr ')'
   34     | '(' Expr . GEQ Expr ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    EQ   shift, and go to state 51
    NEQ  shift, and go to state 52
    LEQ  shift, and go to state 53
    GEQ  shift, and go to state 54
    '<'  shift, and go to state 55
    '>'  shift, and go to state 56
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 29

   37 Cond: '!' Cond .

    $default  reduce using rule 37 (Cond)


State 30

    1 Prog: SE Cond '{' . Prog '}' Se

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 62


State 31

    2 Prog: ENQ Cond '{' . Prog '}' Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 63


State 32

   39 Sexpr: NUM .

    $default  reduce using rule 39 (Sexpr)


State 33

   48 Expr: '(' . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 64


State 34

    4 Prog: VAR '=' Expr . ';' Prog
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ';'  shift, and go to state 65
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 35

    5 Prog: VAR '[' Expr . ']' '=' Expr ';' Prog
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ']'  shift, and go to state 66
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 36

   17 Lexpr: '(' ')' .

    $default  reduce using rule 17 (Lexpr)


State 37

   18 Lexpr: '(' Eexpr . ')'
   20 Eexpr: Eexpr . ',' Expr

    ','  shift, and go to state 67
    ')'  shift, and go to state 68


State 38

   19 Eexpr: Expr .
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 19 (Eexpr)


State 39

    7 Prog: VAR Lexpr ';' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 69


State 40

   13 Eatrib: VAR '=' . Expr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 70


State 41

   12 Eatrib: VAR '[' . Expr ']'
   14       | VAR '[' . Expr ']' '=' Expr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 71


State 42

   21 Ltipo: '(' . ')'
   22      | '(' . Etipo ')'

    TIPO  shift, and go to state 72
    ')'   shift, and go to state 73

    Etipo  go to state 74


State 43

    6 Prog: TIPO VAR Ltipo . '{' Prog '}' Prog

    '{'  shift, and go to state 75


State 44

    3 Prog: TIPO Eatrib ';' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 76


State 45

   15 Eatrib: Eatrib ',' . VAR '=' Expr
   16       | Eatrib ',' . VAR

    VAR  shift, and go to state 77


State 46

   40 Sexpr: VAR '[' . Expr ']'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 78


State 47

   41 Sexpr: VAR Lexpr .

    $default  reduce using rule 41 (Sexpr)


State 48

   29 Cond: '(' Expr . EQ Expr ')'
   30     | '(' Expr . NEQ Expr ')'
   31     | '(' Expr . '<' Expr ')'
   32     | '(' Expr . '>' Expr ')'
   33     | '(' Expr . LEQ Expr ')'
   34     | '(' Expr . GEQ Expr ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr
   48     | '(' Expr . ')'

    EQ   shift, and go to state 51
    NEQ  shift, and go to state 52
    LEQ  shift, and go to state 53
    GEQ  shift, and go to state 54
    ')'  shift, and go to state 79
    '<'  shift, and go to state 55
    '>'  shift, and go to state 56
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 49

   35 Cond: '(' Cond E . Cond ')'

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 80


State 50

   36 Cond: '(' Cond OU . Cond ')'

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 81


State 51

   29 Cond: '(' Expr EQ . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 82


State 52

   30 Cond: '(' Expr NEQ . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 83


State 53

   33 Cond: '(' Expr LEQ . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 84


State 54

   34 Cond: '(' Expr GEQ . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 85


State 55

   31 Cond: '(' Expr '<' . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 86


State 56

   32 Cond: '(' Expr '>' . Expr ')'

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 87


State 57

   43 Expr: Expr '+' . Sexpr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24

    Sexpr  go to state 88


State 58

   44 Expr: Expr '-' . Sexpr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24

    Sexpr  go to state 89


State 59

   45 Expr: Expr '*' . Sexpr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24

    Sexpr  go to state 90


State 60

   46 Expr: Expr '/' . Sexpr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24

    Sexpr  go to state 91


State 61

   47 Expr: Expr '%' . Sexpr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24

    Sexpr  go to state 92


State 62

    1 Prog: SE Cond '{' Prog . '}' Se

    '}'  shift, and go to state 93


State 63

    2 Prog: ENQ Cond '{' Prog . '}' Prog

    '}'  shift, and go to state 94


State 64

   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr
   48     | '(' Expr . ')'

    ')'  shift, and go to state 79
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 65

    4 Prog: VAR '=' Expr ';' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 95


State 66

    5 Prog: VAR '[' Expr ']' . '=' Expr ';' Prog

    '='  shift, and go to state 96


State 67

   20 Eexpr: Eexpr ',' . Expr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 97


State 68

   18 Lexpr: '(' Eexpr ')' .

    $default  reduce using rule 18 (Lexpr)


State 69

    7 Prog: VAR Lexpr ';' Prog .

    $default  reduce using rule 7 (Prog)


State 70

   13 Eatrib: VAR '=' Expr .
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 13 (Eatrib)


State 71

   12 Eatrib: VAR '[' Expr . ']'
   14       | VAR '[' Expr . ']' '=' Expr
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ']'  shift, and go to state 98
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 72

   23 Etipo: TIPO . VAR

    VAR  shift, and go to state 99


State 73

   21 Ltipo: '(' ')' .

    $default  reduce using rule 21 (Ltipo)


State 74

   22 Ltipo: '(' Etipo . ')'
   24 Etipo: Etipo . ',' TIPO VAR

    ','  shift, and go to state 100
    ')'  shift, and go to state 101


State 75

    6 Prog: TIPO VAR Ltipo '{' . Prog '}' Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 102


State 76

    3 Prog: TIPO Eatrib ';' Prog .

    $default  reduce using rule 3 (Prog)


State 77

   15 Eatrib: Eatrib ',' VAR . '=' Expr
   16       | Eatrib ',' VAR .

    '='  shift, and go to state 103

    $default  reduce using rule 16 (Eatrib)


State 78

   40 Sexpr: VAR '[' Expr . ']'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ']'  shift, and go to state 104
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 79

   48 Expr: '(' Expr ')' .

    $default  reduce using rule 48 (Expr)


State 80

   35 Cond: '(' Cond E Cond . ')'

    ')'  shift, and go to state 105


State 81

   36 Cond: '(' Cond OU Cond . ')'

    ')'  shift, and go to state 106


State 82

   29 Cond: '(' Expr EQ Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 107
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 83

   30 Cond: '(' Expr NEQ Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 108
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 84

   33 Cond: '(' Expr LEQ Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 109
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 85

   34 Cond: '(' Expr GEQ Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 110
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 86

   31 Cond: '(' Expr '<' Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 111
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 87

   32 Cond: '(' Expr '>' Expr . ')'
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ')'  shift, and go to state 112
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 88

   43 Expr: Expr '+' Sexpr .

    $default  reduce using rule 43 (Expr)


State 89

   44 Expr: Expr '-' Sexpr .

    $default  reduce using rule 44 (Expr)


State 90

   45 Expr: Expr '*' Sexpr .

    $default  reduce using rule 45 (Expr)


State 91

   46 Expr: Expr '/' Sexpr .

    $default  reduce using rule 46 (Expr)


State 92

   47 Expr: Expr '%' Sexpr .

    $default  reduce using rule 47 (Expr)


State 93

    1 Prog: SE Cond '{' Prog '}' . Se

    SE     shift, and go to state 1
    SENAO  shift, and go to state 113
    CASO   shift, and go to state 114
    ENQ    shift, and go to state 2
    VAR    shift, and go to state 3
    TIPO   shift, and go to state 4
    COM    shift, and go to state 5
    ';'    shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 115
    Se    go to state 116


State 94

    2 Prog: ENQ Cond '{' Prog '}' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 117


State 95

    4 Prog: VAR '=' Expr ';' Prog .

    $default  reduce using rule 4 (Prog)


State 96

    5 Prog: VAR '[' Expr ']' '=' . Expr ';' Prog

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 118


State 97

   20 Eexpr: Eexpr ',' Expr .
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 20 (Eexpr)


State 98

   12 Eatrib: VAR '[' Expr ']' .
   14       | VAR '[' Expr ']' . '=' Expr

    '='  shift, and go to state 119

    $default  reduce using rule 12 (Eatrib)


State 99

   23 Etipo: TIPO VAR .

    $default  reduce using rule 23 (Etipo)


State 100

   24 Etipo: Etipo ',' . TIPO VAR

    TIPO  shift, and go to state 120


State 101

   22 Ltipo: '(' Etipo ')' .

    $default  reduce using rule 22 (Ltipo)


State 102

    6 Prog: TIPO VAR Ltipo '{' Prog . '}' Prog

    '}'  shift, and go to state 121


State 103

   15 Eatrib: Eatrib ',' VAR '=' . Expr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 122


State 104

   40 Sexpr: VAR '[' Expr ']' .

    $default  reduce using rule 40 (Sexpr)


State 105

   35 Cond: '(' Cond E Cond ')' .

    $default  reduce using rule 35 (Cond)


State 106

   36 Cond: '(' Cond OU Cond ')' .

    $default  reduce using rule 36 (Cond)


State 107

   29 Cond: '(' Expr EQ Expr ')' .

    $default  reduce using rule 29 (Cond)


State 108

   30 Cond: '(' Expr NEQ Expr ')' .

    $default  reduce using rule 30 (Cond)


State 109

   33 Cond: '(' Expr LEQ Expr ')' .

    $default  reduce using rule 33 (Cond)


State 110

   34 Cond: '(' Expr GEQ Expr ')' .

    $default  reduce using rule 34 (Cond)


State 111

   31 Cond: '(' Expr '<' Expr ')' .

    $default  reduce using rule 31 (Cond)


State 112

   32 Cond: '(' Expr '>' Expr ')' .

    $default  reduce using rule 32 (Cond)


State 113

   27 Se: SENAO . '{' Prog '}' Prog

    '{'  shift, and go to state 123


State 114

   26 Se: CASO . Cond '{' Prog '}' SE

    NUM  shift, and go to state 8
    '('  shift, and go to state 9
    '!'  shift, and go to state 10

    Cond  go to state 124


State 115

   25 Se: Prog .

    $default  reduce using rule 25 (Se)


State 116

    1 Prog: SE Cond '{' Prog '}' Se .

    $default  reduce using rule 1 (Prog)


State 117

    2 Prog: ENQ Cond '{' Prog '}' Prog .

    $default  reduce using rule 2 (Prog)


State 118

    5 Prog: VAR '[' Expr ']' '=' Expr . ';' Prog
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    ';'  shift, and go to state 125
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61


State 119

   14 Eatrib: VAR '[' Expr ']' '=' . Expr

    VAR  shift, and go to state 22
    NUM  shift, and go to state 32
    STR  shift, and go to state 24
    '('  shift, and go to state 33

    Sexpr  go to state 27
    Expr   go to state 126


State 120

   24 Etipo: Etipo ',' TIPO . VAR

    VAR  shift, and go to state 127


State 121

    6 Prog: TIPO VAR Ltipo '{' Prog '}' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 128


State 122

   15 Eatrib: Eatrib ',' VAR '=' Expr .
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 15 (Eatrib)


State 123

   27 Se: SENAO '{' . Prog '}' Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 129


State 124

   26 Se: CASO Cond . '{' Prog '}' SE

    '{'  shift, and go to state 130


State 125

    5 Prog: VAR '[' Expr ']' '=' Expr ';' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 131


State 126

   14 Eatrib: VAR '[' Expr ']' '=' Expr .
   43 Expr: Expr . '+' Sexpr
   44     | Expr . '-' Sexpr
   45     | Expr . '*' Sexpr
   46     | Expr . '/' Sexpr
   47     | Expr . '%' Sexpr

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 14 (Eatrib)


State 127

   24 Etipo: Etipo ',' TIPO VAR .

    $default  reduce using rule 24 (Etipo)


State 128

    6 Prog: TIPO VAR Ltipo '{' Prog '}' Prog .

    $default  reduce using rule 6 (Prog)


State 129

   27 Se: SENAO '{' Prog . '}' Prog

    '}'  shift, and go to state 132


State 130

   26 Se: CASO Cond '{' . Prog '}' SE

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 133


State 131

    5 Prog: VAR '[' Expr ']' '=' Expr ';' Prog .

    $default  reduce using rule 5 (Prog)


State 132

   27 Se: SENAO '{' Prog '}' . Prog

    SE    shift, and go to state 1
    ENQ   shift, and go to state 2
    VAR   shift, and go to state 3
    TIPO  shift, and go to state 4
    COM   shift, and go to state 5
    ';'   shift, and go to state 6

    $default  reduce using rule 10 (Prog)

    Prog  go to state 134


State 133

   26 Se: CASO Cond '{' Prog . '}' SE

    '}'  shift, and go to state 135


State 134

   27 Se: SENAO '{' Prog '}' Prog .

    $default  reduce using rule 27 (Se)


State 135

   26 Se: CASO Cond '{' Prog '}' . SE

    SE  shift, and go to state 136


State 136

   26 Se: CASO Cond '{' Prog '}' SE .

    $default  reduce using rule 26 (Se)
