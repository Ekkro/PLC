State 25 conflicts: 1 shift/reduce


Grammar

    0 $accept: ProgG $end

    1 ProgG: ProgG Se
    2      | ProgG Enq
    3      | ProgG Atrib ';'
    4      | ProgG VAR '=' Expr ';'
    5      | ProgG VAR '[' NUM ']' '=' Expr ';'
    6      | ProgG TIPO VAR Ltipo '{' ProgF '}'
    7      | ProgG Funcao ';'
    8      | ProgG ';'
    9      | ProgG COM
   10      | %empty

   11 ProgF: ProgF Se
   12      | ProgF Enq
   13      | ProgF Atrib ';'
   14      | ProgF VAR '=' Expr ';'
   15      | ProgF VAR '[' NUM ']' '=' Expr ';'
   16      | ProgF Funcao ';'
   17      | ProgF ';'
   18      | ProgF COM
   19      | ProgF RETURN Expr ';'
   20      | %empty

   21 Prog: Prog Se
   22     | Prog Enq
   23     | Prog Atrib ';'
   24     | Prog VAR '=' Expr ';'
   25     | Prog VAR '[' NUM ']' '=' Expr ';'
   26     | Prog Funcao ';'
   27     | Prog ';'
   28     | Prog COM
   29     | %empty

   30 Funcao: VAR Lexpr

   31 Atrib: TIPO VAR
   32      | TIPO VAR '[' NUM ']'
   33      | Igual

   34 Igual: TIPO VAR '='
   35      | Igual Expr

   36 Lexpr: '(' ')'
   37      | '(' Eexpr ')'

   38 Eexpr: Expr
   39      | Eexpr ',' Expr

   40 Ltipo: '(' ')'
   41      | '(' Etipo ')'

   42 Etipo: TIPO VAR
   43      | Etipo ',' TIPO VAR

   44 Se: SE Cond
   45   | Se '{' Prog '}' CASO Cond
   46   | Se '{' Prog '}' SENAO
   47   | Se '{' Prog '}'

   48 Enq: ENQ
   49    | Enq Cond
   50    | Enq '{' Prog '}'

   51 Cond: NUM
   52     | '(' Expr EQ Expr ')'
   53     | '(' Expr NEQ Expr ')'
   54     | '(' Expr '<' Expr ')'
   55     | '(' Expr '>' Expr ')'
   56     | '(' Expr LEQ Expr ')'
   57     | '(' Expr GEQ Expr ')'
   58     | '(' Cond E Cond ')'
   59     | '(' Cond OU Cond ')'
   60     | '!' Cond

   61 Sexpr: VAR
   62      | NUM
   63      | VAR '[' Expr ']'
   64      | Funcao
   65      | STR

   66 Expr: '(' Expr '+' Expr ')'
   67     | '(' Expr '-' Expr ')'
   68     | '(' Expr '*' Expr ')'
   69     | '(' Expr '/' Expr ')'
   70     | '(' Expr '%' Expr ')'
   71     | '(' Expr ')'
   72     | Sexpr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 60
'%' (37) 70
'(' (40) 36 37 40 41 52 53 54 55 56 57 58 59 66 67 68 69 70 71
')' (41) 36 37 40 41 52 53 54 55 56 57 58 59 66 67 68 69 70 71
'*' (42) 68
'+' (43) 66
',' (44) 39 43
'-' (45) 67
'/' (47) 69
';' (59) 3 4 5 7 8 13 14 15 16 17 19 23 24 25 26 27
'<' (60) 54
'=' (61) 4 5 14 15 24 25 34
'>' (62) 55
'[' (91) 5 15 25 32 63
']' (93) 5 15 25 32 63
'{' (123) 6 45 46 47 50
'}' (125) 6 45 46 47 50
error (256)
SE (258) 44
SENAO (259) 46
CASO (260) 45
ENQ (261) 48
VAR (262) 4 5 6 14 15 24 25 30 31 32 34 42 43 61 63
TIPO (263) 6 31 32 34 42 43
NUM (264) 5 15 25 32 51 62
EQ (265) 52
NEQ (266) 53
LEQ (267) 56
GEQ (268) 57
E (269) 58
OU (270) 59
STR (271) 65
COM (272) 9 18 28
RETURN (273) 19


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
ProgG (37)
    on left: 1 2 3 4 5 6 7 8 9 10, on right: 0 1 2 3 4 5 6 7 8 9
ProgF (38)
    on left: 11 12 13 14 15 16 17 18 19 20, on right: 6 11 12 13 14
    15 16 17 18 19
Prog (39)
    on left: 21 22 23 24 25 26 27 28 29, on right: 21 22 23 24 25 26
    27 28 45 46 47 50
Funcao (40)
    on left: 30, on right: 7 16 26 64
Atrib (41)
    on left: 31 32 33, on right: 3 13 23
Igual (42)
    on left: 34 35, on right: 33 35
Lexpr (43)
    on left: 36 37, on right: 30
Eexpr (44)
    on left: 38 39, on right: 37 39
Ltipo (45)
    on left: 40 41, on right: 6
Etipo (46)
    on left: 42 43, on right: 41 43
Se (47)
    on left: 44 45 46 47, on right: 1 11 21 45 46 47
Enq (48)
    on left: 48 49 50, on right: 2 12 22 49 50
Cond (49)
    on left: 51 52 53 54 55 56 57 58 59 60, on right: 44 45 49 58 59
    60
Sexpr (50)
    on left: 61 62 63 64 65, on right: 72
Expr (51)
    on left: 66 67 68 69 70 71 72, on right: 4 5 14 15 19 24 25 35
    38 39 52 53 54 55 56 57 63 66 67 68 69 70 71


State 0

    0 $accept: . ProgG $end

    $default  reduce using rule 10 (ProgG)

    ProgG  go to state 1


State 1

    0 $accept: ProgG . $end
    1 ProgG: ProgG . Se
    2      | ProgG . Enq
    3      | ProgG . Atrib ';'
    4      | ProgG . VAR '=' Expr ';'
    5      | ProgG . VAR '[' NUM ']' '=' Expr ';'
    6      | ProgG . TIPO VAR Ltipo '{' ProgF '}'
    7      | ProgG . Funcao ';'
    8      | ProgG . ';'
    9      | ProgG . COM

    $end  shift, and go to state 2
    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 5
    TIPO  shift, and go to state 6
    COM   shift, and go to state 7
    ';'   shift, and go to state 8

    Funcao  go to state 9
    Atrib   go to state 10
    Igual   go to state 11
    Se      go to state 12
    Enq     go to state 13


State 2

    0 $accept: ProgG $end .

    $default  accept


State 3

   44 Se: SE . Cond

    NUM  shift, and go to state 14
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    Cond  go to state 17


State 4

   48 Enq: ENQ .

    $default  reduce using rule 48 (Enq)


State 5

    4 ProgG: ProgG VAR . '=' Expr ';'
    5      | ProgG VAR . '[' NUM ']' '=' Expr ';'
   30 Funcao: VAR . Lexpr

    '='  shift, and go to state 18
    '['  shift, and go to state 19
    '('  shift, and go to state 20

    Lexpr  go to state 21


State 6

    6 ProgG: ProgG TIPO . VAR Ltipo '{' ProgF '}'
   31 Atrib: TIPO . VAR
   32      | TIPO . VAR '[' NUM ']'
   34 Igual: TIPO . VAR '='

    VAR  shift, and go to state 22


State 7

    9 ProgG: ProgG COM .

    $default  reduce using rule 9 (ProgG)


State 8

    8 ProgG: ProgG ';' .

    $default  reduce using rule 8 (ProgG)


State 9

    7 ProgG: ProgG Funcao . ';'

    ';'  shift, and go to state 23


State 10

    3 ProgG: ProgG Atrib . ';'

    ';'  shift, and go to state 24


State 11

   33 Atrib: Igual .
   35 Igual: Igual . Expr

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    $default  reduce using rule 33 (Atrib)

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 31


State 12

    1 ProgG: ProgG Se .
   45 Se: Se . '{' Prog '}' CASO Cond
   46   | Se . '{' Prog '}' SENAO
   47   | Se . '{' Prog '}'

    '{'  shift, and go to state 32

    $default  reduce using rule 1 (ProgG)


State 13

    2 ProgG: ProgG Enq .
   49 Enq: Enq . Cond
   50    | Enq . '{' Prog '}'

    NUM  shift, and go to state 14
    '{'  shift, and go to state 33
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    $default  reduce using rule 2 (ProgG)

    Cond  go to state 34


State 14

   51 Cond: NUM .

    $default  reduce using rule 51 (Cond)


State 15

   52 Cond: '(' . Expr EQ Expr ')'
   53     | '(' . Expr NEQ Expr ')'
   54     | '(' . Expr '<' Expr ')'
   55     | '(' . Expr '>' Expr ')'
   56     | '(' . Expr LEQ Expr ')'
   57     | '(' . Expr GEQ Expr ')'
   58     | '(' . Cond E Cond ')'
   59     | '(' . Cond OU Cond ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 35
    STR  shift, and go to state 27
    '('  shift, and go to state 36
    '!'  shift, and go to state 16

    Funcao  go to state 29
    Cond    go to state 37
    Sexpr   go to state 30
    Expr    go to state 38


State 16

   60 Cond: '!' . Cond

    NUM  shift, and go to state 14
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    Cond  go to state 39


State 17

   44 Se: SE Cond .

    $default  reduce using rule 44 (Se)


State 18

    4 ProgG: ProgG VAR '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 40


State 19

    5 ProgG: ProgG VAR '[' . NUM ']' '=' Expr ';'

    NUM  shift, and go to state 41


State 20

   36 Lexpr: '(' . ')'
   37      | '(' . Eexpr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28
    ')'  shift, and go to state 42

    Funcao  go to state 29
    Eexpr   go to state 43
    Sexpr   go to state 30
    Expr    go to state 44


State 21

   30 Funcao: VAR Lexpr .

    $default  reduce using rule 30 (Funcao)


State 22

    6 ProgG: ProgG TIPO VAR . Ltipo '{' ProgF '}'
   31 Atrib: TIPO VAR .
   32      | TIPO VAR . '[' NUM ']'
   34 Igual: TIPO VAR . '='

    '='  shift, and go to state 45
    '['  shift, and go to state 46
    '('  shift, and go to state 47

    $default  reduce using rule 31 (Atrib)

    Ltipo  go to state 48


State 23

    7 ProgG: ProgG Funcao ';' .

    $default  reduce using rule 7 (ProgG)


State 24

    3 ProgG: ProgG Atrib ';' .

    $default  reduce using rule 3 (ProgG)


State 25

   30 Funcao: VAR . Lexpr
   61 Sexpr: VAR .
   63      | VAR . '[' Expr ']'

    '['  shift, and go to state 49
    '('  shift, and go to state 20

    '('       [reduce using rule 61 (Sexpr)]
    $default  reduce using rule 61 (Sexpr)

    Lexpr  go to state 21


State 26

   62 Sexpr: NUM .

    $default  reduce using rule 62 (Sexpr)


State 27

   65 Sexpr: STR .

    $default  reduce using rule 65 (Sexpr)


State 28

   66 Expr: '(' . Expr '+' Expr ')'
   67     | '(' . Expr '-' Expr ')'
   68     | '(' . Expr '*' Expr ')'
   69     | '(' . Expr '/' Expr ')'
   70     | '(' . Expr '%' Expr ')'
   71     | '(' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 50


State 29

   64 Sexpr: Funcao .

    $default  reduce using rule 64 (Sexpr)


State 30

   72 Expr: Sexpr .

    $default  reduce using rule 72 (Expr)


State 31

   35 Igual: Igual Expr .

    $default  reduce using rule 35 (Igual)


State 32

   45 Se: Se '{' . Prog '}' CASO Cond
   46   | Se '{' . Prog '}' SENAO
   47   | Se '{' . Prog '}'

    $default  reduce using rule 29 (Prog)

    Prog  go to state 51


State 33

   50 Enq: Enq '{' . Prog '}'

    $default  reduce using rule 29 (Prog)

    Prog  go to state 52


State 34

   49 Enq: Enq Cond .

    $default  reduce using rule 49 (Enq)


State 35

   51 Cond: NUM .
   62 Sexpr: NUM .

    E         reduce using rule 51 (Cond)
    OU        reduce using rule 51 (Cond)
    $default  reduce using rule 62 (Sexpr)


State 36

   52 Cond: '(' . Expr EQ Expr ')'
   53     | '(' . Expr NEQ Expr ')'
   54     | '(' . Expr '<' Expr ')'
   55     | '(' . Expr '>' Expr ')'
   56     | '(' . Expr LEQ Expr ')'
   57     | '(' . Expr GEQ Expr ')'
   58     | '(' . Cond E Cond ')'
   59     | '(' . Cond OU Cond ')'
   66 Expr: '(' . Expr '+' Expr ')'
   67     | '(' . Expr '-' Expr ')'
   68     | '(' . Expr '*' Expr ')'
   69     | '(' . Expr '/' Expr ')'
   70     | '(' . Expr '%' Expr ')'
   71     | '(' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 35
    STR  shift, and go to state 27
    '('  shift, and go to state 36
    '!'  shift, and go to state 16

    Funcao  go to state 29
    Cond    go to state 37
    Sexpr   go to state 30
    Expr    go to state 53


State 37

   58 Cond: '(' Cond . E Cond ')'
   59     | '(' Cond . OU Cond ')'

    E   shift, and go to state 54
    OU  shift, and go to state 55


State 38

   52 Cond: '(' Expr . EQ Expr ')'
   53     | '(' Expr . NEQ Expr ')'
   54     | '(' Expr . '<' Expr ')'
   55     | '(' Expr . '>' Expr ')'
   56     | '(' Expr . LEQ Expr ')'
   57     | '(' Expr . GEQ Expr ')'

    EQ   shift, and go to state 56
    NEQ  shift, and go to state 57
    LEQ  shift, and go to state 58
    GEQ  shift, and go to state 59
    '<'  shift, and go to state 60
    '>'  shift, and go to state 61


State 39

   60 Cond: '!' Cond .

    $default  reduce using rule 60 (Cond)


State 40

    4 ProgG: ProgG VAR '=' Expr . ';'

    ';'  shift, and go to state 62


State 41

    5 ProgG: ProgG VAR '[' NUM . ']' '=' Expr ';'

    ']'  shift, and go to state 63


State 42

   36 Lexpr: '(' ')' .

    $default  reduce using rule 36 (Lexpr)


State 43

   37 Lexpr: '(' Eexpr . ')'
   39 Eexpr: Eexpr . ',' Expr

    ')'  shift, and go to state 64
    ','  shift, and go to state 65


State 44

   38 Eexpr: Expr .

    $default  reduce using rule 38 (Eexpr)


State 45

   34 Igual: TIPO VAR '=' .

    $default  reduce using rule 34 (Igual)


State 46

   32 Atrib: TIPO VAR '[' . NUM ']'

    NUM  shift, and go to state 66


State 47

   40 Ltipo: '(' . ')'
   41      | '(' . Etipo ')'

    TIPO  shift, and go to state 67
    ')'   shift, and go to state 68

    Etipo  go to state 69


State 48

    6 ProgG: ProgG TIPO VAR Ltipo . '{' ProgF '}'

    '{'  shift, and go to state 70


State 49

   63 Sexpr: VAR '[' . Expr ']'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 71


State 50

   66 Expr: '(' Expr . '+' Expr ')'
   67     | '(' Expr . '-' Expr ')'
   68     | '(' Expr . '*' Expr ')'
   69     | '(' Expr . '/' Expr ')'
   70     | '(' Expr . '%' Expr ')'
   71     | '(' Expr . ')'

    ')'  shift, and go to state 72
    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77


State 51

   21 Prog: Prog . Se
   22     | Prog . Enq
   23     | Prog . Atrib ';'
   24     | Prog . VAR '=' Expr ';'
   25     | Prog . VAR '[' NUM ']' '=' Expr ';'
   26     | Prog . Funcao ';'
   27     | Prog . ';'
   28     | Prog . COM
   45 Se: Se '{' Prog . '}' CASO Cond
   46   | Se '{' Prog . '}' SENAO
   47   | Se '{' Prog . '}'

    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 78
    TIPO  shift, and go to state 79
    COM   shift, and go to state 80
    ';'   shift, and go to state 81
    '}'   shift, and go to state 82

    Funcao  go to state 83
    Atrib   go to state 84
    Igual   go to state 11
    Se      go to state 85
    Enq     go to state 86


State 52

   21 Prog: Prog . Se
   22     | Prog . Enq
   23     | Prog . Atrib ';'
   24     | Prog . VAR '=' Expr ';'
   25     | Prog . VAR '[' NUM ']' '=' Expr ';'
   26     | Prog . Funcao ';'
   27     | Prog . ';'
   28     | Prog . COM
   50 Enq: Enq '{' Prog . '}'

    SE    shift, and go to state 3
    ENQ   shift, and go to state 4
    VAR   shift, and go to state 78
    TIPO  shift, and go to state 79
    COM   shift, and go to state 80
    ';'   shift, and go to state 81
    '}'   shift, and go to state 87

    Funcao  go to state 83
    Atrib   go to state 84
    Igual   go to state 11
    Se      go to state 85
    Enq     go to state 86


State 53

   52 Cond: '(' Expr . EQ Expr ')'
   53     | '(' Expr . NEQ Expr ')'
   54     | '(' Expr . '<' Expr ')'
   55     | '(' Expr . '>' Expr ')'
   56     | '(' Expr . LEQ Expr ')'
   57     | '(' Expr . GEQ Expr ')'
   66 Expr: '(' Expr . '+' Expr ')'
   67     | '(' Expr . '-' Expr ')'
   68     | '(' Expr . '*' Expr ')'
   69     | '(' Expr . '/' Expr ')'
   70     | '(' Expr . '%' Expr ')'
   71     | '(' Expr . ')'

    EQ   shift, and go to state 56
    NEQ  shift, and go to state 57
    LEQ  shift, and go to state 58
    GEQ  shift, and go to state 59
    ')'  shift, and go to state 72
    '<'  shift, and go to state 60
    '>'  shift, and go to state 61
    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77


State 54

   58 Cond: '(' Cond E . Cond ')'

    NUM  shift, and go to state 14
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    Cond  go to state 88


State 55

   59 Cond: '(' Cond OU . Cond ')'

    NUM  shift, and go to state 14
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    Cond  go to state 89


State 56

   52 Cond: '(' Expr EQ . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 90


State 57

   53 Cond: '(' Expr NEQ . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 91


State 58

   56 Cond: '(' Expr LEQ . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 92


State 59

   57 Cond: '(' Expr GEQ . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 93


State 60

   54 Cond: '(' Expr '<' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 94


State 61

   55 Cond: '(' Expr '>' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 95


State 62

    4 ProgG: ProgG VAR '=' Expr ';' .

    $default  reduce using rule 4 (ProgG)


State 63

    5 ProgG: ProgG VAR '[' NUM ']' . '=' Expr ';'

    '='  shift, and go to state 96


State 64

   37 Lexpr: '(' Eexpr ')' .

    $default  reduce using rule 37 (Lexpr)


State 65

   39 Eexpr: Eexpr ',' . Expr

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 97


State 66

   32 Atrib: TIPO VAR '[' NUM . ']'

    ']'  shift, and go to state 98


State 67

   42 Etipo: TIPO . VAR

    VAR  shift, and go to state 99


State 68

   40 Ltipo: '(' ')' .

    $default  reduce using rule 40 (Ltipo)


State 69

   41 Ltipo: '(' Etipo . ')'
   43 Etipo: Etipo . ',' TIPO VAR

    ')'  shift, and go to state 100
    ','  shift, and go to state 101


State 70

    6 ProgG: ProgG TIPO VAR Ltipo '{' . ProgF '}'

    $default  reduce using rule 20 (ProgF)

    ProgF  go to state 102


State 71

   63 Sexpr: VAR '[' Expr . ']'

    ']'  shift, and go to state 103


State 72

   71 Expr: '(' Expr ')' .

    $default  reduce using rule 71 (Expr)


State 73

   66 Expr: '(' Expr '+' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 104


State 74

   67 Expr: '(' Expr '-' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 105


State 75

   68 Expr: '(' Expr '*' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 106


State 76

   69 Expr: '(' Expr '/' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 107


State 77

   70 Expr: '(' Expr '%' . Expr ')'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 108


State 78

   24 Prog: Prog VAR . '=' Expr ';'
   25     | Prog VAR . '[' NUM ']' '=' Expr ';'
   30 Funcao: VAR . Lexpr

    '='  shift, and go to state 109
    '['  shift, and go to state 110
    '('  shift, and go to state 20

    Lexpr  go to state 21


State 79

   31 Atrib: TIPO . VAR
   32      | TIPO . VAR '[' NUM ']'
   34 Igual: TIPO . VAR '='

    VAR  shift, and go to state 111


State 80

   28 Prog: Prog COM .

    $default  reduce using rule 28 (Prog)


State 81

   27 Prog: Prog ';' .

    $default  reduce using rule 27 (Prog)


State 82

   45 Se: Se '{' Prog '}' . CASO Cond
   46   | Se '{' Prog '}' . SENAO
   47   | Se '{' Prog '}' .

    SENAO  shift, and go to state 112
    CASO   shift, and go to state 113

    $default  reduce using rule 47 (Se)


State 83

   26 Prog: Prog Funcao . ';'

    ';'  shift, and go to state 114


State 84

   23 Prog: Prog Atrib . ';'

    ';'  shift, and go to state 115


State 85

   21 Prog: Prog Se .
   45 Se: Se . '{' Prog '}' CASO Cond
   46   | Se . '{' Prog '}' SENAO
   47   | Se . '{' Prog '}'

    '{'  shift, and go to state 32

    $default  reduce using rule 21 (Prog)


State 86

   22 Prog: Prog Enq .
   49 Enq: Enq . Cond
   50    | Enq . '{' Prog '}'

    NUM  shift, and go to state 14
    '{'  shift, and go to state 33
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    $default  reduce using rule 22 (Prog)

    Cond  go to state 34


State 87

   50 Enq: Enq '{' Prog '}' .

    $default  reduce using rule 50 (Enq)


State 88

   58 Cond: '(' Cond E Cond . ')'

    ')'  shift, and go to state 116


State 89

   59 Cond: '(' Cond OU Cond . ')'

    ')'  shift, and go to state 117


State 90

   52 Cond: '(' Expr EQ Expr . ')'

    ')'  shift, and go to state 118


State 91

   53 Cond: '(' Expr NEQ Expr . ')'

    ')'  shift, and go to state 119


State 92

   56 Cond: '(' Expr LEQ Expr . ')'

    ')'  shift, and go to state 120


State 93

   57 Cond: '(' Expr GEQ Expr . ')'

    ')'  shift, and go to state 121


State 94

   54 Cond: '(' Expr '<' Expr . ')'

    ')'  shift, and go to state 122


State 95

   55 Cond: '(' Expr '>' Expr . ')'

    ')'  shift, and go to state 123


State 96

    5 ProgG: ProgG VAR '[' NUM ']' '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 124


State 97

   39 Eexpr: Eexpr ',' Expr .

    $default  reduce using rule 39 (Eexpr)


State 98

   32 Atrib: TIPO VAR '[' NUM ']' .

    $default  reduce using rule 32 (Atrib)


State 99

   42 Etipo: TIPO VAR .

    $default  reduce using rule 42 (Etipo)


State 100

   41 Ltipo: '(' Etipo ')' .

    $default  reduce using rule 41 (Ltipo)


State 101

   43 Etipo: Etipo ',' . TIPO VAR

    TIPO  shift, and go to state 125


State 102

    6 ProgG: ProgG TIPO VAR Ltipo '{' ProgF . '}'
   11 ProgF: ProgF . Se
   12      | ProgF . Enq
   13      | ProgF . Atrib ';'
   14      | ProgF . VAR '=' Expr ';'
   15      | ProgF . VAR '[' NUM ']' '=' Expr ';'
   16      | ProgF . Funcao ';'
   17      | ProgF . ';'
   18      | ProgF . COM
   19      | ProgF . RETURN Expr ';'

    SE      shift, and go to state 3
    ENQ     shift, and go to state 4
    VAR     shift, and go to state 126
    TIPO    shift, and go to state 79
    COM     shift, and go to state 127
    RETURN  shift, and go to state 128
    ';'     shift, and go to state 129
    '}'     shift, and go to state 130

    Funcao  go to state 131
    Atrib   go to state 132
    Igual   go to state 11
    Se      go to state 133
    Enq     go to state 134


State 103

   63 Sexpr: VAR '[' Expr ']' .

    $default  reduce using rule 63 (Sexpr)


State 104

   66 Expr: '(' Expr '+' Expr . ')'

    ')'  shift, and go to state 135


State 105

   67 Expr: '(' Expr '-' Expr . ')'

    ')'  shift, and go to state 136


State 106

   68 Expr: '(' Expr '*' Expr . ')'

    ')'  shift, and go to state 137


State 107

   69 Expr: '(' Expr '/' Expr . ')'

    ')'  shift, and go to state 138


State 108

   70 Expr: '(' Expr '%' Expr . ')'

    ')'  shift, and go to state 139


State 109

   24 Prog: Prog VAR '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 140


State 110

   25 Prog: Prog VAR '[' . NUM ']' '=' Expr ';'

    NUM  shift, and go to state 141


State 111

   31 Atrib: TIPO VAR .
   32      | TIPO VAR . '[' NUM ']'
   34 Igual: TIPO VAR . '='

    '='  shift, and go to state 45
    '['  shift, and go to state 46

    $default  reduce using rule 31 (Atrib)


State 112

   46 Se: Se '{' Prog '}' SENAO .

    $default  reduce using rule 46 (Se)


State 113

   45 Se: Se '{' Prog '}' CASO . Cond

    NUM  shift, and go to state 14
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    Cond  go to state 142


State 114

   26 Prog: Prog Funcao ';' .

    $default  reduce using rule 26 (Prog)


State 115

   23 Prog: Prog Atrib ';' .

    $default  reduce using rule 23 (Prog)


State 116

   58 Cond: '(' Cond E Cond ')' .

    $default  reduce using rule 58 (Cond)


State 117

   59 Cond: '(' Cond OU Cond ')' .

    $default  reduce using rule 59 (Cond)


State 118

   52 Cond: '(' Expr EQ Expr ')' .

    $default  reduce using rule 52 (Cond)


State 119

   53 Cond: '(' Expr NEQ Expr ')' .

    $default  reduce using rule 53 (Cond)


State 120

   56 Cond: '(' Expr LEQ Expr ')' .

    $default  reduce using rule 56 (Cond)


State 121

   57 Cond: '(' Expr GEQ Expr ')' .

    $default  reduce using rule 57 (Cond)


State 122

   54 Cond: '(' Expr '<' Expr ')' .

    $default  reduce using rule 54 (Cond)


State 123

   55 Cond: '(' Expr '>' Expr ')' .

    $default  reduce using rule 55 (Cond)


State 124

    5 ProgG: ProgG VAR '[' NUM ']' '=' Expr . ';'

    ';'  shift, and go to state 143


State 125

   43 Etipo: Etipo ',' TIPO . VAR

    VAR  shift, and go to state 144


State 126

   14 ProgF: ProgF VAR . '=' Expr ';'
   15      | ProgF VAR . '[' NUM ']' '=' Expr ';'
   30 Funcao: VAR . Lexpr

    '='  shift, and go to state 145
    '['  shift, and go to state 146
    '('  shift, and go to state 20

    Lexpr  go to state 21


State 127

   18 ProgF: ProgF COM .

    $default  reduce using rule 18 (ProgF)


State 128

   19 ProgF: ProgF RETURN . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 147


State 129

   17 ProgF: ProgF ';' .

    $default  reduce using rule 17 (ProgF)


State 130

    6 ProgG: ProgG TIPO VAR Ltipo '{' ProgF '}' .

    $default  reduce using rule 6 (ProgG)


State 131

   16 ProgF: ProgF Funcao . ';'

    ';'  shift, and go to state 148


State 132

   13 ProgF: ProgF Atrib . ';'

    ';'  shift, and go to state 149


State 133

   11 ProgF: ProgF Se .
   45 Se: Se . '{' Prog '}' CASO Cond
   46   | Se . '{' Prog '}' SENAO
   47   | Se . '{' Prog '}'

    '{'  shift, and go to state 32

    $default  reduce using rule 11 (ProgF)


State 134

   12 ProgF: ProgF Enq .
   49 Enq: Enq . Cond
   50    | Enq . '{' Prog '}'

    NUM  shift, and go to state 14
    '{'  shift, and go to state 33
    '('  shift, and go to state 15
    '!'  shift, and go to state 16

    $default  reduce using rule 12 (ProgF)

    Cond  go to state 34


State 135

   66 Expr: '(' Expr '+' Expr ')' .

    $default  reduce using rule 66 (Expr)


State 136

   67 Expr: '(' Expr '-' Expr ')' .

    $default  reduce using rule 67 (Expr)


State 137

   68 Expr: '(' Expr '*' Expr ')' .

    $default  reduce using rule 68 (Expr)


State 138

   69 Expr: '(' Expr '/' Expr ')' .

    $default  reduce using rule 69 (Expr)


State 139

   70 Expr: '(' Expr '%' Expr ')' .

    $default  reduce using rule 70 (Expr)


State 140

   24 Prog: Prog VAR '=' Expr . ';'

    ';'  shift, and go to state 150


State 141

   25 Prog: Prog VAR '[' NUM . ']' '=' Expr ';'

    ']'  shift, and go to state 151


State 142

   45 Se: Se '{' Prog '}' CASO Cond .

    $default  reduce using rule 45 (Se)


State 143

    5 ProgG: ProgG VAR '[' NUM ']' '=' Expr ';' .

    $default  reduce using rule 5 (ProgG)


State 144

   43 Etipo: Etipo ',' TIPO VAR .

    $default  reduce using rule 43 (Etipo)


State 145

   14 ProgF: ProgF VAR '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 152


State 146

   15 ProgF: ProgF VAR '[' . NUM ']' '=' Expr ';'

    NUM  shift, and go to state 153


State 147

   19 ProgF: ProgF RETURN Expr . ';'

    ';'  shift, and go to state 154


State 148

   16 ProgF: ProgF Funcao ';' .

    $default  reduce using rule 16 (ProgF)


State 149

   13 ProgF: ProgF Atrib ';' .

    $default  reduce using rule 13 (ProgF)


State 150

   24 Prog: Prog VAR '=' Expr ';' .

    $default  reduce using rule 24 (Prog)


State 151

   25 Prog: Prog VAR '[' NUM ']' . '=' Expr ';'

    '='  shift, and go to state 155


State 152

   14 ProgF: ProgF VAR '=' Expr . ';'

    ';'  shift, and go to state 156


State 153

   15 ProgF: ProgF VAR '[' NUM . ']' '=' Expr ';'

    ']'  shift, and go to state 157


State 154

   19 ProgF: ProgF RETURN Expr ';' .

    $default  reduce using rule 19 (ProgF)


State 155

   25 Prog: Prog VAR '[' NUM ']' '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 158


State 156

   14 ProgF: ProgF VAR '=' Expr ';' .

    $default  reduce using rule 14 (ProgF)


State 157

   15 ProgF: ProgF VAR '[' NUM ']' . '=' Expr ';'

    '='  shift, and go to state 159


State 158

   25 Prog: Prog VAR '[' NUM ']' '=' Expr . ';'

    ';'  shift, and go to state 160


State 159

   15 ProgF: ProgF VAR '[' NUM ']' '=' . Expr ';'

    VAR  shift, and go to state 25
    NUM  shift, and go to state 26
    STR  shift, and go to state 27
    '('  shift, and go to state 28

    Funcao  go to state 29
    Sexpr   go to state 30
    Expr    go to state 161


State 160

   25 Prog: Prog VAR '[' NUM ']' '=' Expr ';' .

    $default  reduce using rule 25 (Prog)


State 161

   15 ProgF: ProgF VAR '[' NUM ']' '=' Expr . ';'

    ';'  shift, and go to state 162


State 162

   15 ProgF: ProgF VAR '[' NUM ']' '=' Expr ';' .

    $default  reduce using rule 15 (ProgF)
